import React, { createContext, useContext, useReducer, ReactNode } from 'react';
import { PentestSession, ScanState, ActivityEvent, SystemHealth } from '@/types/pentest';

interface PentestState {
  currentSession?: PentestSession;
  sessions: PentestSession[];
  activityFeed: ActivityEvent[];
  systemHealth: SystemHealth;
  isLoading: boolean;
}

type PentestAction =
  | { type: 'START_SCAN'; payload: PentestSession }
  | { type: 'UPDATE_PROGRESS'; payload: { sessionId: string; progress: number } }
  | { type: 'UPDATE_STATE'; payload: { sessionId: string; state: ScanState } }
  | { type: 'ADD_ACTIVITY'; payload: ActivityEvent }
  | { type: 'UPDATE_SYSTEM_HEALTH'; payload: SystemHealth }
  | { type: 'SET_LOADING'; payload: boolean }
  | { type: 'COMPLETE_SCAN'; payload: { sessionId: string; results: any } };

const initialState: PentestState = {
  sessions: [],
  activityFeed: [],
  systemHealth: {
    n8nStatus: 'healthy',
    dockerContainers: { running: 3, total: 3 },
    apiLimits: {
      gemini: { used: 145, limit: 1000 },
      shodan: { used: 23, limit: 100 },
      gmail: { used: 5, limit: 50 }
    },
    memoryUsage: 72,
    cpuUsage: 45
  },
  isLoading: false
};

function pentestReducer(state: PentestState, action: PentestAction): PentestState {
  switch (action.type) {
    case 'START_SCAN':
      return {
        ...state,
        currentSession: action.payload,
        sessions: [action.payload, ...state.sessions],
        isLoading: true
      };
    
    case 'UPDATE_PROGRESS':
      return {
        ...state,
        currentSession: state.currentSession?.id === action.payload.sessionId
          ? { ...state.currentSession, progress: action.payload.progress }
          : state.currentSession,
        sessions: state.sessions.map(session =>
          session.id === action.payload.sessionId
            ? { ...session, progress: action.payload.progress }
            : session
        )
      };
    
    case 'UPDATE_STATE':
      return {
        ...state,
        currentSession: state.currentSession?.id === action.payload.sessionId
          ? { ...state.currentSession, state: action.payload.state }
          : state.currentSession,
        sessions: state.sessions.map(session =>
          session.id === action.payload.sessionId
            ? { ...session, state: action.payload.state }
            : session
        ),
        isLoading: action.payload.state === 'scanning' || action.payload.state === 'analyzing'
      };
    
    case 'ADD_ACTIVITY':
      return {
        ...state,
        activityFeed: [action.payload, ...state.activityFeed.slice(0, 49)] // Keep last 50
      };
    
    case 'UPDATE_SYSTEM_HEALTH':
      return {
        ...state,
        systemHealth: action.payload
      };
    
    case 'SET_LOADING':
      return {
        ...state,
        isLoading: action.payload
      };
    
    case 'COMPLETE_SCAN':
      return {
        ...state,
        currentSession: state.currentSession?.id === action.payload.sessionId
          ? { ...state.currentSession, state: 'complete', results: action.payload.results }
          : state.currentSession,
        sessions: state.sessions.map(session =>
          session.id === action.payload.sessionId
            ? { ...session, state: 'complete', results: action.payload.results }
            : session
        ),
        isLoading: false
      };
    
    default:
      return state;
  }
}

interface PentestContextValue extends PentestState {
  dispatch: React.Dispatch<PentestAction>;
}

const PentestContext = createContext<PentestContextValue | undefined>(undefined);

export function PentestProvider({ children }: { children: ReactNode }) {
  const [state, dispatch] = useReducer(pentestReducer, initialState);

  return (
    <PentestContext.Provider value={{ ...state, dispatch }}>
      {children}
    </PentestContext.Provider>
  );
}

export function usePentest() {
  const context = useContext(PentestContext);
  if (context === undefined) {
    throw new Error('usePentest must be used within a PentestProvider');
  }
  return context;
}