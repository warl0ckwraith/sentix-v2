export type ScanState = 'idle' | 'scanning' | 'analyzing' | 'complete' | 'error';

export type WorkflowPhase = 
  | 'reconnaissance'
  | 'vulnerability_analysis' 
  | 'threat_intelligence'
  | 'exploitation'
  | 'reporting';

export interface ScanTarget {
  id: string;
  target: string;
  type: 'ip' | 'domain' | 'cidr';
  scanType: 'quick' | 'deep' | 'custom';
  createdAt: Date;
}

export interface WorkflowStep {
  id: string;
  name: string;
  phase: WorkflowPhase;
  status: 'pending' | 'running' | 'completed' | 'failed';
  progress: number;
  startTime?: Date;
  endTime?: Date;
  output?: string;
}

export interface Vulnerability {
  id: string;
  cve?: string;
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';
  title: string;
  description: string;
  port?: number;
  service?: string;
  cvssScore?: number;
  exploitAvailable: boolean;
}

export interface ScanResults {
  id: string;
  targetId: string;
  openPorts: number[];
  services: Array<{
    port: number;
    service: string;
    version?: string;
    state: string;
  }>;
  vulnerabilities: Vulnerability[];
  riskScore: number;
  threatLevel: 'low' | 'medium' | 'high' | 'critical';
  aiConfidence: number;
  shodanHits: number;
  remediationActions: string[];
}

export interface PentestSession {
  id: string;
  target: ScanTarget;
  state: ScanState;
  currentPhase?: WorkflowPhase;
  progress: number;
  steps: WorkflowStep[];
  results?: ScanResults;
  startTime: Date;
  estimatedEndTime?: Date;
  reportUrl?: string;
  errorMessage?: string;
}

export interface SystemHealth {
  n8nStatus: 'healthy' | 'degraded' | 'down';
  dockerContainers: {
    running: number;
    total: number;
  };
  apiLimits: {
    gemini: { used: number; limit: number };
    shodan: { used: number; limit: number };
    gmail: { used: number; limit: number };
  };
  memoryUsage: number;
  cpuUsage: number;
}

export interface ActivityEvent {
  id: string;
  timestamp: Date;
  type: 'info' | 'success' | 'warning' | 'error';
  message: string;
  phase?: WorkflowPhase;
  details?: Record<string, any>;
}