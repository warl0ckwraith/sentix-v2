import { useState, useEffect } from "react";
import { 
  Shield, 
  Activity, 
  Clock, 
  AlertTriangle, 
  CheckCircle, 
  Loader, 
  Pause, 
  Square, 
  Mail, 
  Settings,
  Search,
  Brain,
  Zap,
  Filter,
  ChevronDown,
  ChevronUp
} from "lucide-react";

interface DashboardData {
  scanId: string;
  targetIp: string;
  overallProgress: number;
  riskScore: number;
  etaMinutes: number;
  lastUpdate: string;
  
  metrics: {
    openPorts: number;
    vulnerabilities: number;
    services: number;
    aiConfidence: number;
    shodanHits: number;
    remediationActions: number;
  };
  
  phases: Array<{
    name: string;
    status: 'completed' | 'running' | 'queued' | 'error';
    progress: number;
    duration?: string;
    tasks: Array<{
      name: string;
      status: 'completed' | 'running' | 'queued';
      timestamp?: string;
    }>;
  }>;
  
  activities: Array<{
    id: string;
    category: 'scanning' | 'analysis' | 'critical' | 'progress';
    message: string;
    timestamp: string;
    icon: string;
  }>;
  
  systemHealth: {
    n8nWorkflows: 'healthy' | 'warning' | 'error';
    dockerContainers: 'healthy' | 'warning' | 'error';
    apiLimits: 'healthy' | 'warning' | 'error';
    database: 'healthy' | 'warning' | 'error';
  };
}

const mockData: DashboardData = {
  scanId: "scan_2024_001",
  targetIp: "192.168.1.100",
  overallProgress: 73,
  riskScore: 74,
  etaMinutes: 24,
  lastUpdate: new Date().toISOString(),
  
  metrics: {
    openPorts: 23,
    vulnerabilities: 3,
    services: 15,
    aiConfidence: 87,
    shodanHits: 12,
    remediationActions: 8
  },
  
  phases: [
    {
      name: "RECONNAISSANCE PHASE",
      status: "completed",
      progress: 100,
      duration: "8m 32s",
      tasks: [
        { name: "Port scan completed", status: "completed", timestamp: "14:32:15" },
        { name: "Service version detection", status: "completed", timestamp: "14:31:45" },
        { name: "OS fingerprinting", status: "completed", timestamp: "14:31:20" }
      ]
    },
    {
      name: "VULNERABILITY ANALYSIS",
      status: "completed",
      progress: 100,
      duration: "12m 18s",
      tasks: [
        { name: "CVE database matching", status: "completed", timestamp: "14:28:30" },
        { name: "Exploit availability check", status: "completed", timestamp: "14:27:15" },
        { name: "CVSS score calculation", status: "completed", timestamp: "14:26:45" }
      ]
    },
    {
      name: "AI ANALYSIS PHASE",
      status: "running",
      progress: 68,
      tasks: [
        { name: "Intelligent threat assessment", status: "running", timestamp: "14:25:10" },
        { name: "Risk categorization", status: "queued" },
        { name: "Remediation strategy", status: "queued" }
      ]
    },
    {
      name: "REPORTING PHASE",
      status: "queued",
      progress: 0,
      tasks: [
        { name: "HTML report generation", status: "queued" },
        { name: "Executive summary", status: "queued" },
        { name: "Email delivery", status: "queued" }
      ]
    }
  ],
  
  activities: [
    { id: "1", category: "progress", message: "AI analysis 68% complete - high confidence findings", timestamp: "14:35:22", icon: "brain" },
    { id: "2", category: "critical", message: "3 critical vulnerabilities identified requiring immediate attention", timestamp: "14:34:15", icon: "alert-triangle" },
    { id: "3", category: "analysis", message: "Intelligent threat assessment with 87% confidence", timestamp: "14:33:45", icon: "zap" },
    { id: "4", category: "scanning", message: "Vulnerability analysis completed - 23 open ports analyzed", timestamp: "14:32:15", icon: "search" },
    { id: "5", category: "progress", message: "Service version detection completed for 15 services", timestamp: "14:31:45", icon: "check-circle" },
    { id: "6", category: "scanning", message: "Port scan initiated on target 192.168.1.100", timestamp: "14:31:00", icon: "activity" }
  ],
  
  systemHealth: {
    n8nWorkflows: "healthy",
    dockerContainers: "healthy", 
    apiLimits: "warning",
    database: "healthy"
  }
};

const useDashboardState = () => {
  const [dashboardData, setDashboardData] = useState<DashboardData>(mockData);
  const [selectedPhase, setSelectedPhase] = useState<string | null>(null);
  const [activityFilter, setActivityFilter] = useState<string>('all');

  useEffect(() => {
    const interval = setInterval(() => {
      setDashboardData(prev => ({
        ...prev,
        lastUpdate: new Date().toISOString(),
        overallProgress: Math.min(prev.overallProgress + Math.random() * 2, 100)
      }));
    }, 3000);
    return () => clearInterval(interval);
  }, []);

  return { dashboardData, selectedPhase, setSelectedPhase, activityFilter, setActivityFilter };
};

const CircularProgress = ({ progress, size = 80, strokeWidth = 3, color = "#00D4FF" }: {
  progress: number;
  size?: number;
  strokeWidth?: number;
  color?: string;
}) => {
  const radius = (size - strokeWidth) / 2;
  const circumference = radius * 2 * Math.PI;
  const offset = circumference - (progress / 100) * circumference;

  return (
    <div className="relative" style={{ width: size, height: size }}>
      <svg width={size} height={size} className="transform -rotate-90">
        <circle
          cx={size / 2}
          cy={size / 2}
          r={radius}
          stroke="#2A2A3E"
          strokeWidth={strokeWidth}
          fill="none"
        />
        <circle
          cx={size / 2}
          cy={size / 2}
          r={radius}
          stroke={color}
          strokeWidth={strokeWidth}
          fill="none"
          strokeDasharray={circumference}
          strokeDashoffset={offset}
          strokeLinecap="round"
          className="transition-all duration-800 ease-out progress-bar"
        />
      </svg>
      <div className="absolute inset-0 flex items-center justify-center">
        <span className="text-xl font-bold" style={{ color }}>{progress}%</span>
      </div>
    </div>
  );
};

export const EnhancedPentestDashboard = () => {
  const { dashboardData, selectedPhase, setSelectedPhase, activityFilter, setActivityFilter } = useDashboardState();

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'text-[#00FF88]';
      case 'running': return 'text-[#00D4FF]';
      case 'error': return 'text-[#FF3366]';
      case 'queued': return 'text-[#B4B4C3]';
      default: return 'text-[#B4B4C3]';
    }
  };

  const getHealthColor = (health: string) => {
    switch (health) {
      case 'healthy': return 'bg-[#00FF88]';
      case 'warning': return 'bg-[#FF6B00]';
      case 'error': return 'bg-[#FF3366]';
      default: return 'bg-[#B4B4C3]';
    }
  };

  const getRiskColor = (score: number) => {
    if (score <= 30) return '#00FF88';
    if (score <= 70) return '#FF6B00';
    return '#FF3366';
  };

  const filteredActivities = dashboardData.activities.filter(activity => 
    activityFilter === 'all' || activity.category === activityFilter
  );

  return (
    <div className="min-h-screen bg-[#0A0A0F] text-[#FFFFFF] p-6">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Shield className="h-8 w-8 text-[#00D4FF]" />
            <div>
              <h1 className="text-3xl font-bold">AI Pentesting Dashboard</h1>
              <p className="text-[#B4B4C3]">Target: {dashboardData.targetIp}</p>
            </div>
          </div>
          <div className="flex items-center gap-2 text-sm text-[#B4B4C3]">
            <div className="w-2 h-2 bg-[#00FF88] rounded-full animate-pulse scanning"></div>
            <span>Real-time sync</span>
          </div>
        </div>
      </div>

      {/* Executive Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        {/* Overall Progress */}
        <div className="bg-[#242438] border border-[#2A2A3E] rounded-xl p-6 min-h-[120px] hover:transform hover:-translate-y-1 transition-all duration-200 metric-card">
          <div className="flex items-center justify-center mb-4">
            <CircularProgress progress={dashboardData.overallProgress} color="#00D4FF" />
          </div>
          <h3 className="text-sm font-medium text-[#B4B4C3] text-center">Overall Progress</h3>
          <p className="text-xs text-[#B4B4C3] text-center mt-1">ETA: {dashboardData.etaMinutes}m</p>
        </div>

        {/* Risk Score */}
        <div className="bg-[#242438] border border-[#2A2A3E] rounded-xl p-6 min-h-[120px] hover:transform hover:-translate-y-1 transition-all duration-200 metric-card">
          <div className="flex items-center justify-center mb-4">
            <CircularProgress 
              progress={dashboardData.riskScore} 
              color={getRiskColor(dashboardData.riskScore)}
            />
          </div>
          <h3 className="text-sm font-medium text-[#B4B4C3] text-center">Risk Score</h3>
          <p className="text-xs text-[#FF3366] text-center mt-1">High Risk</p>
        </div>

        {/* ETA Remaining */}
        <div className="bg-[#242438] border border-[#2A2A3E] rounded-xl p-6 min-h-[120px] hover:transform hover:-translate-y-1 transition-all duration-200 metric-card">
          <div className="flex items-center justify-center mb-4">
            <Clock className="h-12 w-12 text-[#FF6B00]" />
          </div>
          <h3 className="text-sm font-medium text-[#B4B4C3] text-center">ETA Remaining</h3>
          <p className="text-2xl font-bold text-center text-[#FF6B00]">{dashboardData.etaMinutes}m</p>
          <p className="text-xs text-[#B4B4C3] text-center mt-1">Estimated completion</p>
        </div>

        {/* Last Update */}
        <div className="bg-[#242438] border border-[#2A2A3E] rounded-xl p-6 min-h-[120px] hover:transform hover:-translate-y-1 transition-all duration-200 metric-card">
          <div className="flex items-center justify-center mb-4">
            <Activity className="h-12 w-12 text-[#00FF88]" />
          </div>
          <h3 className="text-sm font-medium text-[#B4B4C3] text-center">Last Update</h3>
          <p className="text-sm font-bold text-center text-[#00FF88]">
            {new Date(dashboardData.lastUpdate).toLocaleTimeString()}
          </p>
          <p className="text-xs text-[#B4B4C3] text-center mt-1">Real-time sync</p>
        </div>
      </div>

      {/* Main Content Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-5 gap-8 mb-8">
        {/* Scan Progress - Left Column (60%) */}
        <div className="lg:col-span-3 space-y-6">
          <h2 className="text-xl font-semibold mb-4">Scan Progress</h2>
          
          {dashboardData.phases.map((phase, index) => (
            <div key={index} className="bg-[#242438] border border-[#2A2A3E] rounded-xl p-6">
              <div 
                className="flex items-center justify-between cursor-pointer"
                onClick={() => setSelectedPhase(selectedPhase === phase.name ? null : phase.name)}
              >
                <div className="flex items-center gap-4">
                  {phase.status === 'completed' && <CheckCircle className="h-6 w-6 text-[#00FF88]" />}
                  {phase.status === 'running' && <Loader className="h-6 w-6 text-[#00D4FF] animate-spin scanning" />}
                  {phase.status === 'queued' && <Clock className="h-6 w-6 text-[#B4B4C3]" />}
                  {phase.status === 'error' && <AlertTriangle className="h-6 w-6 text-[#FF3366]" />}
                  
                  <div>
                    <h3 className="font-semibold">{phase.name}</h3>
                    {phase.duration && (
                      <p className="text-sm text-[#B4B4C3]">Duration: {phase.duration}</p>
                    )}
                  </div>
                </div>
                
                <div className="flex items-center gap-4">
                  <span className={`text-sm font-medium ${getStatusColor(phase.status)}`}>
                    {phase.progress}%
                  </span>
                  {selectedPhase === phase.name ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
                </div>
              </div>
              
              {/* Progress Bar */}
              <div className="mt-4 bg-[#1A1A24] rounded-full h-2">
                <div 
                  className={`h-2 rounded-full progress-bar ${
                    phase.status === 'completed' ? 'bg-[#00FF88]' :
                    phase.status === 'running' ? 'bg-[#00D4FF]' :
                    'bg-[#B4B4C3]'
                  }`}
                  style={{ width: `${phase.progress}%` }}
                />
              </div>
              
              {/* Task Details */}
              {selectedPhase === phase.name && (
                <div className="mt-6 space-y-3 activity-item">
                  {phase.tasks.map((task, taskIndex) => (
                    <div key={taskIndex} className="flex items-center gap-3 pl-4">
                      {task.status === 'completed' && <CheckCircle className="h-4 w-4 text-[#00FF88]" />}
                      {task.status === 'running' && <Loader className="h-4 w-4 text-[#00D4FF] animate-spin" />}
                      {task.status === 'queued' && <Clock className="h-4 w-4 text-[#B4B4C3]" />}
                      
                      <span className="text-sm">{task.name}</span>
                      {task.timestamp && (
                        <span className="text-xs text-[#B4B4C3] ml-auto">{task.timestamp}</span>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>
          ))}
        </div>

        {/* Activity Feed - Right Column (40%) */}
        <div className="lg:col-span-2 space-y-6">
          <div className="flex items-center justify-between">
            <h2 className="text-xl font-semibold">Activity Feed</h2>
            <div className="flex items-center gap-2">
              <Filter className="h-4 w-4 text-[#B4B4C3]" />
              <select 
                value={activityFilter}
                onChange={(e) => setActivityFilter(e.target.value)}
                className="bg-[#1A1A24] border border-[#2A2A3E] rounded px-2 py-1 text-sm text-[#FFFFFF]"
              >
                <option value="all">All</option>
                <option value="scanning">🔍 Scanning</option>
                <option value="analysis">🧠 Analysis</option>
                <option value="critical">⚠️ Critical</option>
                <option value="progress">📊 Progress</option>
              </select>
            </div>
          </div>
          
          <div className="bg-[#242438] border border-[#2A2A3E] rounded-xl p-4 max-h-96 overflow-y-auto">
            <div className="space-y-4">
              {filteredActivities.map((activity) => (
                <div key={activity.id} className="flex items-start gap-3 activity-item">
                  <div className={`p-2 rounded-lg ${
                    activity.category === 'scanning' ? 'bg-blue-500/20 text-[#00D4FF]' :
                    activity.category === 'analysis' ? 'bg-purple-500/20 text-purple-400' :
                    activity.category === 'critical' ? 'bg-red-500/20 text-[#FF3366]' :
                    'bg-green-500/20 text-[#00FF88]'
                  }`}>
                    {activity.icon === 'brain' && <Brain className="h-4 w-4" />}
                    {activity.icon === 'alert-triangle' && <AlertTriangle className="h-4 w-4" />}
                    {activity.icon === 'zap' && <Zap className="h-4 w-4" />}
                    {activity.icon === 'search' && <Search className="h-4 w-4" />}
                    {activity.icon === 'check-circle' && <CheckCircle className="h-4 w-4" />}
                    {activity.icon === 'activity' && <Activity className="h-4 w-4" />}
                  </div>
                  
                  <div className="flex-1 min-w-0">
                    <p className="text-sm text-[#FFFFFF]">{activity.message}</p>
                    <p className="text-xs text-[#B4B4C3] mt-1">{activity.timestamp}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* System Health Bar */}
      <div className="bg-[#242438] border border-[#2A2A3E] rounded-xl p-6 mb-8">
        <h3 className="text-lg font-semibold mb-4">System Health</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
          <div className="flex items-center gap-3">
            <div className={`w-3 h-3 rounded-full ${getHealthColor(dashboardData.systemHealth.n8nWorkflows)}`} />
            <span className="text-sm">n8n Workflows</span>
          </div>
          <div className="flex items-center gap-3">
            <div className={`w-3 h-3 rounded-full ${getHealthColor(dashboardData.systemHealth.dockerContainers)}`} />
            <span className="text-sm">Docker Containers</span>
          </div>
          <div className="flex items-center gap-3">
            <div className={`w-3 h-3 rounded-full ${getHealthColor(dashboardData.systemHealth.apiLimits)}`} />
            <span className="text-sm">API Rate Limits</span>
          </div>
          <div className="flex items-center gap-3">
            <div className={`w-3 h-3 rounded-full ${getHealthColor(dashboardData.systemHealth.database)}`} />
            <span className="text-sm">Database</span>
          </div>
        </div>
      </div>

      {/* Floating Action Controls */}
      <div className="fixed bottom-6 right-6 flex flex-col gap-3">
        <button className="bg-[#FF6B00] hover:bg-orange-400 text-white p-3 rounded-full shadow-lg transition-colors metric-card" aria-label="Pause Scan">
          <Pause className="h-5 w-5" />
        </button>
        <button className="bg-[#FF3366] hover:bg-red-400 text-white p-3 rounded-full shadow-lg transition-colors metric-card" aria-label="Stop Scan">
          <Square className="h-5 w-5" />
        </button>
        <button className="bg-[#00D4FF] hover:bg-blue-400 text-white p-3 rounded-full shadow-lg transition-colors metric-card" aria-label="Send Report">
          <Mail className="h-5 w-5" />
        </button>
        <button className="bg-[#B4B4C3] hover:bg-gray-400 text-white p-3 rounded-full shadow-lg transition-colors metric-card" aria-label="Settings">
          <Settings className="h-5 w-5" />
        </button>
      </div>

    </div>
  );
};